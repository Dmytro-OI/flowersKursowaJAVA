package gui;

import Command.*;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import models.Bouquet;
import models.Flower;
import models.Accessory;

import java.util.*;

public class FlowerApp extends Application {
    private final List<Bouquet> bouquets = new ArrayList<>();
    private final ListView<String> bouquetListView = new ListView<>();
    private final ComboBox<Integer> bouquetSelector = new ComboBox<>();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        stage.setTitle("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±—É–∫–µ—Ç–∞–º–∏ –∫–≤—ñ—Ç—ñ–≤");

        Button addBouquetBtn = new Button("‚ûï –î–æ–¥–∞—Ç–∏ –±—É–∫–µ—Ç");
        Button deleteBouquetBtn = new Button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –±—É–∫–µ—Ç");
        Button addFlowerBtn = new Button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–≤—ñ—Ç–∫—É");
        Button addAccessoryBtn = new Button("üéÄ –î–æ–¥–∞—Ç–∏ –∞–∫—Å–µ—Å—É–∞—Ä");
        Button removeFlowerBtn = new Button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∫—É (–∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º)");
        Button removeAccessoryBtn = new Button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Å–µ—Å—É–∞—Ä (–∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º)");
        Button sortBtn = new Button("üîÉ –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–≤—ñ—Ç–∏");
        Button totalCostBtn = new Button("üí∞ –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å");
        Button totalFreshnessBtn = new Button("üå∏ –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–≤—ñ–∂—ñ—Å—Ç—å");
        Button filterBtn = new Button("üîç –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é —Å—Ç–µ–±–ª–∞");
        Button saveDbBtn = new Button("üì• –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –±–∞–∑—É");
        Button loadDbBtn = new Button("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –±–∞–∑–∏");
        Button deleteBouquetDbBtn = new Button("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –±—É–∫–µ—Ç –∑ –ë–î");

        FlowPane buttons = new FlowPane(10, 10,
                addBouquetBtn, deleteBouquetBtn, addFlowerBtn, addAccessoryBtn,
                removeFlowerBtn, removeAccessoryBtn, sortBtn, totalCostBtn, totalFreshnessBtn,
                filterBtn, saveDbBtn, loadDbBtn, deleteBouquetDbBtn);
        buttons.setPadding(new Insets(10));

        VBox layout = new VBox(10,
                new Label("–í–∏–±–µ—Ä—ñ—Ç—å –±—É–∫–µ—Ç:"),
                bouquetSelector,
                bouquetListView,
                buttons);
        layout.setPadding(new Insets(15));

        bouquetSelector.setOnAction(e -> refreshBouquetDisplay());

        addBouquetBtn.setOnAction(e -> {
            int bouquetId = promptInt("–í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞:", bouquets.size() + 1);
            if (bouquetId <= 0) {
                showInfo("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –±—É–∫–µ—Ç–∞ (ID –º–∞—î –±—É—Ç–∏ > 0).");
                return;
            }
            if (SaveBouquetsToDatabaseMenu.bouquetExistsInDatabase(bouquetId, "jdbc:sqlite:flower.db")) {
                if (!bouquetSelector.getItems().contains(bouquetId)) {
                    Bouquet existingBouquet = new Bouquet(bouquetId);
                    bouquets.add(existingBouquet);
                    new LoadBouquetsFromDatabaseMenu(bouquets).execute();
                    bouquetSelector.getItems().add(bouquetId);
                    bouquetSelector.setValue(bouquetId);
                    refreshBouquetDisplay();
                    showInfo("–ë—É–∫–µ—Ç —ñ–∑ ID " + bouquetId + " —É–∂–µ —ñ—Å–Ω—É—î –≤ –ë–î. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –π–æ–≥–æ.");
                } else {
                    showInfo("–ë—É–∫–µ—Ç —ñ–∑ ID " + bouquetId + " —É–∂–µ —ñ—Å–Ω—É—î –≤ –ø–∞–º‚Äô—è—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –π–æ–≥–æ.");
                    bouquetSelector.setValue(bouquetId);
                }
            } else {
                if (bouquetSelector.getItems().contains(bouquetId)) {
                    showInfo("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –±—É–∫–µ—Ç–∞ (ID —É–∂–µ —ñ—Å–Ω—É—î –≤ –ø–∞–º‚Äô—è—Ç—ñ).");
                    return;
                }
                Command cmd = new AddBouquetMenu(bouquets, bouquetId);
                cmd.execute();
                bouquetSelector.getItems().add(bouquetId);
                bouquetSelector.setValue(bouquetId);
                refreshBouquetDisplay();
            }
        });

        deleteBouquetBtn.setOnAction(e -> {
            Integer selected = bouquetSelector.getValue();
            if (selected != null) {
                Command cmd = new DeleteBouquetMenu(bouquets, selected);
                cmd.execute();
                bouquetSelector.getItems().remove(selected);
                bouquetSelector.getSelectionModel().clearSelection();
                refreshBouquetDisplay();
            }
        });

        addFlowerBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                String type = promptString("–¢–∏–ø –∫–≤—ñ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¢—Ä–æ—è–Ω–¥–∞):", "–¢—Ä–æ—è–Ω–¥–∞");
                double stem = promptDouble("–î–æ–≤–∂–∏–Ω–∞ —Å—Ç–µ–±–ª–∞ (—Å–º):", 30.0);
                int freshness = promptInt("–†—ñ–≤–µ–Ω—å —Å–≤—ñ–∂–æ—Å—Ç—ñ (1-5):", 3);
                double price = promptDouble("–¶—ñ–Ω–∞ (–≥—Ä–Ω):", 25.0);
                if (freshness < 1 || freshness > 5) {
                    showInfo("–†—ñ–≤–µ–Ω—å —Å–≤—ñ–∂–æ—Å—Ç—ñ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5!");
                    return;
                }
                Command cmd = new AddFlowerMenu(bouquet, type, stem, freshness, price);
                cmd.execute();
                refreshBouquetDisplay();
            }
        });

        addAccessoryBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                String name = promptString("–ù–∞–∑–≤–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –°—Ç—Ä—ñ—á–∫–∞):", "–°—Ç—Ä—ñ—á–∫–∞");
                double price = promptDouble("–¶—ñ–Ω–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∞ (–≥—Ä–Ω):", 10.0);
                Command cmd = new AddAccessoryMenu(bouquet, name, price);
                cmd.execute();
                refreshBouquetDisplay();
            }
        });

        removeFlowerBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null && !bouquet.getFlowers().isEmpty()) {
                int index = promptInt("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å –∫–≤—ñ—Ç–∫–∏ (–∑ 1):", 1) - 1;
                if (index >= 0 && index < bouquet.getFlowers().size()) {
                    Command cmd = new RemoveFlowerMenu(bouquet, index);
                    cmd.execute();
                    SaveBouquetsToDatabaseMenu.deleteFlowerFromDatabase(bouquet.getBouquetId(), index);
                    refreshBouquetDisplay();
                } else {
                    showInfo("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∫–≤—ñ—Ç–∫–∏");
                }
            } else {
                showInfo("–ë—É–∫–µ—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π!");
            }
        });

        removeAccessoryBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null && !bouquet.getAccessories().isEmpty()) {
                int index = promptInt("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–∫—Å–µ—Å—É–∞—Ä–∞ (–∑ 1):", 1) - 1;
                if (index >= 0 && index < bouquet.getAccessories().size()) {
                    Accessory toRemove = bouquet.getAccessories().get(index);
                    bouquet.removeAccessory(toRemove);
                    SaveBouquetsToDatabaseMenu.deleteAccessoryFromDatabase(bouquet.getBouquetId(), index);
                    refreshBouquetDisplay();
                } else {
                    showInfo("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫—Å–µ—Å—É–∞—Ä–∞");
                }
            }
        });

        sortBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                Command cmd = new SortFlowersMenu(bouquet);
                cmd.execute();
                refreshBouquetDisplay();
            }
        });

        totalCostBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                Command cmd = new CalculateTotalCostMenu(bouquet);
                cmd.execute();
                showInfo("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±—É–∫–µ—Ç–∞: " + bouquet.calculateTotalCost() + " –≥—Ä–Ω");
            }
        });

        totalFreshnessBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                int totalFreshness = bouquet.calculateTotalFreshness();
                showInfo("–ó–∞–≥–∞–ª—å–Ω–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å –±—É–∫–µ—Ç–∞: " + totalFreshness + " (—Å–µ—Ä–µ–¥–Ω—î: " + (totalFreshness / Math.max(1, bouquet.getFlowers().size())) + ")");
            }
        });

        filterBtn.setOnAction(e -> {
            Bouquet bouquet = getSelectedBouquet();
            if (bouquet != null) {
                double min = promptDouble("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–µ–±–ª–∞ (—Å–º):", 10.0);
                double max = promptDouble("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–µ–±–ª–∞ (—Å–º):", 50.0);
                FindFlowersMenu cmd = new FindFlowersMenu(bouquet, min, max);
                cmd.execute();
                List<Flower> found = cmd.getMatchedFlowers();
                if (found.isEmpty()) {
                    showInfo("–ö–≤—ñ—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                } else {
                    StringBuilder sb = new StringBuilder("–ó–Ω–∞–π–¥–µ–Ω–æ –∫–≤—ñ—Ç–∫–∏:\n");
                    for (Flower f : found) sb.append(f).append("\n");
                    showInfo(sb.toString());
                }
            }
        });

        saveDbBtn.setOnAction(e -> {
            new SaveBouquetsToDatabaseMenu(bouquets).execute();
            showInfo("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö.");
        });

        loadDbBtn.setOnAction(e -> {
            new LoadBouquetsFromDatabaseMenu(bouquets).execute();
            updateBouquetSelector();
            showInfo("–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
        });

        deleteBouquetDbBtn.setOnAction(e -> {
            Integer selected = bouquetSelector.getValue();
            if (selected != null) {
                SaveBouquetsToDatabaseMenu.deleteBouquetFromDatabase(selected);
                bouquets.removeIf(b -> b.getBouquetId() == selected);
                updateBouquetSelector();
                showInfo("–ë—É–∫–µ—Ç #" + selected + " –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
            }
        });

        stage.setScene(new Scene(layout, 1150, 600));
        stage.show();
    }

    private void updateBouquetSelector() {
        bouquetSelector.getItems().clear();
        Set<Integer> seen = new HashSet<>();
        for (Bouquet b : bouquets) {
            if (!seen.contains(b.getBouquetId())) {
                bouquetSelector.getItems().add(b.getBouquetId());
                seen.add(b.getBouquetId());
            }
        }
        if (!bouquets.isEmpty()) bouquetSelector.setValue(bouquets.get(0).getBouquetId());
        refreshBouquetDisplay();
    }

    private Bouquet getSelectedBouquet() {
        Integer selected = bouquetSelector.getValue();
        if (selected == null) return null;
        return bouquets.stream().filter(b -> b.getBouquetId() == selected).findFirst().orElse(null);
    }

    private void refreshBouquetDisplay() {
        bouquetListView.getItems().clear();
        Bouquet bouquet = getSelectedBouquet();
        if (bouquet != null) {
            bouquetListView.getItems().add("üíê –ë—É–∫–µ—Ç #" + bouquet.getBouquetId());
            List<Flower> flowers = bouquet.getFlowers();
            if (flowers.isEmpty()) {
                bouquetListView.getItems().add("  (–Ω–µ–º–∞—î –∫–≤—ñ—Ç–æ–∫)");
            } else {
                for (int i = 0; i < flowers.size(); i++) {
                    Flower f = flowers.get(i);
                    bouquetListView.getItems().add("  " + (i + 1) + ". " +
                            "–¢–∏–ø: " + f.getFlowerType() +
                            ", –î–æ–≤–∂–∏–Ω–∞ —Å—Ç–µ–±–ª–∞: " + f.getStemLength() +
                            " —Å–º, –°–≤—ñ–∂—ñ—Å—Ç—å: " + f.getFreshnessLevel() +
                            ", –¶—ñ–Ω–∞: " + f.getPrice() + " –≥—Ä–Ω");
                }
            }
            List<Accessory> accessories = bouquet.getAccessories();
            if (!accessories.isEmpty()) {
                bouquetListView.getItems().add("  –ê–∫—Å–µ—Å—É–∞—Ä–∏:");
                for (int i = 0; i < accessories.size(); i++) {
                    Accessory a = accessories.get(i);
                    bouquetListView.getItems().add("    " + (i + 1) + ". " +
                            "–ù–∞–∑–≤–∞: " + a.getName() +
                            ", –¶—ñ–Ω–∞: " + a.getPrice() + " –≥—Ä–Ω");
                }
            }
        }
    }

    private int promptInt(String msg, int def) {
        TextInputDialog dialog = new TextInputDialog(String.valueOf(def));
        dialog.setTitle("–í–≤—ñ–¥");
        dialog.setHeaderText(null);
        dialog.setContentText(msg);
        Optional<String> result = dialog.showAndWait();
        try {
            return result.map(Integer::parseInt).orElse(def);
        } catch (NumberFormatException e) {
            return def;
        }
    }

    private double promptDouble(String msg, double def) {
        TextInputDialog dialog = new TextInputDialog(String.valueOf(def));
        dialog.setTitle("–í–≤—ñ–¥");
        dialog.setHeaderText(null);
        dialog.setContentText(msg);
        Optional<String> result = dialog.showAndWait();
        try {
            return result.map(Double::parseDouble).orElse(def);
        } catch (NumberFormatException e) {
            return def;
        }
    }

    private String promptString(String msg, String def) {
        TextInputDialog dialog = new TextInputDialog(def);
        dialog.setTitle("–í–≤—ñ–¥");
        dialog.setHeaderText(null);
        dialog.setContentText(msg);
        return dialog.showAndWait().orElse(def);
    }

    private void showInfo(String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION, msg, ButtonType.OK);
        alert.setHeaderText(null);
        alert.showAndWait();
    }
}